ogrListLayers
ogrinfo(url, so=TRUE)
url = "http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=50&outputFormat=application/json"
url<-"http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=50&outputFormat=application/json"
ogrInfo(dsn=url,layer = 'OGRGeoJSON')
ogr2ogr(dsn, "sic.shp", "SIC")
sic <- readOGR("sic.shp", "sic", stringsAsFactors=FALSE)
sic <- readOGR(url, "sic", stringsAsFactors=FALSE)
inputObservations<-readOGR(dsn=url,layer = 'OGRGeoJSON')
url = "http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=50&outputFormat=application/json"
inputObservations<-readOGR(dsn=url,layer = 'OGRGeoJSON')
url = "http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=50&outputFormat=application/json"
ogrResult = ogrListLayers(url) #prints some details
inputObservations<-readOGR(dsn=url,layer = 'OGRGeoJSON')
getwd()
url = "http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=50&outputFormat=json"
download.file(url)
download.file(url,test.json)
download.file(url,"test.json")
ogr2ogr(dsn, "sic.shp", "SIC")
tempFle = "test.json"
download.file(url,tempFle)
sic <- readOGR(getwd(), "tempFile")
getwd()
"GeoJSON" %in% ogrDrivers()$name
tempFile = "test.geojson"
download.file(url,tempFile)
inputObservations = readOGR(tempFile, "OGRGeoJSON")
inputObservations
url = "http://grasp.nottingham.ac.uk:8010/geoserver/CobwebTest/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=CobwebTest:SnowdoniaNationalParkJapaneseKnotweedSurvey_NewIdField&maxFeatures=350&outputFormat=json"
tempFile = "test.geojson"
download.file(url,tempFile)
inputObservations = readOGR(tempFile, "OGRGeoJSON")
sic <- readOGR(getwd(), "tempFile")
inputObservations
predictTPts<- readOGR(dsn="C:/Users/ezzjfr/post_doc/data/spatial_accuracy", layer="true_sample_100_pts_MIN_30m_from_1mCIRAerial_11thJan_bbox_spatial_accuracy")
predictTPts@data
predictTPts@proj4string
# Assign projection
proj4string(meuse) <- CRS("+init=epsg:27700")
# Assign projection
proj4string(predictTP) <- CRS("+init=epsg:27700")
# Assign projection
proj4string(predictTPts) <- CRS("+init=epsg:27700")
library(Rserve)
Rserve()
exit
q()
library(snow)
cl= makeSOCKcluster(1)
q()
library(snow)
cl= makeSOCKcluster(1)
library(snow)
library(doSnow)
install.packages("doSnow")
install.packages("doSNOW")
library(doSnow)
library(doSNOW)
cl <- makeCluster(2, type="SOCK")
library(parallel)
cluster <- makePSOCKcluster("localhost")
cluster <- makePSOCKcluster("localhost")
LIBRARY(SNOWFALL)
library(snowfall)
sfInit( parallel=TRUE, cpus=2 )
library(parallel)
cluster <- makePSOCKcluster("localhost")
q()
library(Rserve)
Rserve())
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q(0)
GETWD()
getwd()
curl -T "test_post_qa_data.geojson" https://dyfi.cobwebproject.eu/pcapi/records/local/731bc121-8264-3982-7d06-84f550577723/b1b28830-9443-46b1-82f7-3d772f30cdb_QA.json
getwd()
curl -T "test.geojson" https://dyfi.cobwebproject.eu/pcapi/records/local/731bc121-8264-3982-7d06-84f550577723/b1b28830-9443-46b1-82f7-3d772f30cdb_QA.json
library(curl)
library(rjson)
curl -T "test.geojson" https://dyfi.cobwebproject.eu/pcapi/records/local/731bc121-8264-3982-7d06-84f550577723/b1b28830-9443-46b1-82f7-3d772f30cdb_QA.json
baseurl = "https://dyfi.cobwebproject.eu/pcapi/surveys/local/"
url = paste0(baseurl,uuid,"/")
url
con = curl(url)
julianSurveys = fromJSON(readLines(con))
julianSurveys
#julian uuid
uuid = "731bc121-8264-3982-7d06-84f550577723"
pubuuid = "2338e388-f34e-25d9-945c-54cffd9c46c2"
#1) Get all surveys of user with id UUID:
baseurl = "https://dyfi.cobwebproject.eu/pcapi/surveys/local/"
url = paste0(baseurl,uuid,"/")
url
con = curl(url)
julianSurveys = fromJSON(readLines(con))
julianSurveys
baseurl = "https://dyfi.cobwebproject.eu/pcapi/surveys/local/"
url = paste0(baseurl,uuid,"/")
url
con = curl(url)
julianSurveys = fromJSON(readLines(con))
julianSurveys
julianSurveys$names[10]
julianSurveys$metadata[10]
#"b1b28830-9443-46b1-82f7-3d772f30cdbb" #"Snowdonia National Park Japanese Knotweed Survey - point"
jkw = julianSurveys$metadata[10]
jkw
baseurl = "https://dyfi.cobwebproject.eu/pcapi/editors/local/"
url = "https://dyfi.cobwebproject.eu/pcapi/editors/local/2338e388-f34e-25d9-945c-54cffd9c46c2/"
url
con = curl(url)
publicSurveys = fromJSON(readLines(con))
publicSurveys
q()
libary(Rserve)
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rseve)
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
libary(MODIS)
library(MODIS)
q()
library(Rserve)
Rserve(0)
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve(0)
library(Rserve)
Rserve()
q(0)
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve(0)
Rserve()
q()
q()
library(Rserve)
Rserve(0)
Rserve()
q(0)
devtools::install_github("abresler/gdeltr2")
library(gdeltr2)
library("gdeltr2")
library(gdeltr2)
get_data_ft_api_domains()
devtools::install_github("abresler/gdeltr2")
library(Rcpp )
library(Rcpp)
install.package("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
devtools::install_github("abresler/gdeltr2")
q()
q(0)
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
q()
library(Rserve)
Rserve()
()
q()
library(Information)
install.packages("Information")
library(Information)
data(train, package="Information")
train <- subset(train, TREATMENT==1)
IV <- create_infotables(data=train, y="PURCHASE", ncore=2)
q()
library(raster)
install.packages("sp")
install.packages("sp")
install.packages("sp")
install.packages("sp")
detach("package:sp", unload=TRUE)
install.packages("sp")
library(raster)
install.packages("raster")
library(raster)
setwd("R_scripts/r_mapping/shanghaiR")
#load mapping and spatial data libraries
library(leaflet)
library(rgdal)
library(rgeos)
library(classInt)
library(raster)
getwd() #get current R working directory. change with setwd("C:/Users/myusername")
nClassBreaks = 6
classifierFunction = "jenks"
#read in the GIS polygon shapefile of the adm1 data. Assumes data is in directory CHN_adm_shp
boundaries <- readOGR("../CHN_adm_shp/Shanghai_AL6_edit_for_Minhang.shp", layer = "Shanghai_AL6_edit_for_Minhang", verbose = FALSE)
#Geometry is quite detailed so they can be simplified to make them display quicker
#simplifiedPolygons <- gSimplify(boundaries, 0.001, topologyPreserve=TRUE) #Creates simplified polygons
simplifiedPolygons = boundaries
chinaSPDF = SpatialPolygonsDataFrame(simplifiedPolygons, data=boundaries@data) #Need to copy the attributes from the loaded data into
simplifiedPolygons = spTransform(simplifiedPolygons, CRS("+proj=utm +zone=51 +datum=WGS84"))
chinaSPDF$areas = gArea(simplifiedPolygons,byid = TRUE)/1000000 #sqkm
#Create a map object with some background OpenStreetMap
myMap = leaflet(chinaSPDF) %>% addTiles()
#myMap = leaflet(chinaSPDF) %>% addProviderTiles(providers$CartoDB.Positron)
#Determine a variable to map. Currently this is the ID_1 column of the gis polygons that is goint to be mapped.
#Something else could be mapped by loading a table of data (e.g. migration counts), and joining to chinaSPDF using a common attribute.
#Read the csv of data to be mapped
migData = read.csv("../chinaCensusExtracts/Shanghai_migrants_by_district_merged_for_2017_osm_districts.csv", fill = TRUE)
#join (inner join) with merge
require(sp)
chinaSPDF <- merge(chinaSPDF,migData, by.x="ID", by.y="OSMID")
#Count variable
myVariableToMap = chinaSPDF@data$Number_of_migrants
#Add a normalised by area variable
chinaSPDF$migsNormalisedByArea = chinaSPDF$Number_of_migrants/chinaSPDF$areas
myVariableToMap2 = chinaSPDF$migsNormalisedByArea
#Classlify the data for choropleth mapping
palData = classIntervals(chinaSPDF$Number_of_migrants, n=nClassBreaks, style=classifierFunction)
palData2 = classIntervals(chinaSPDF$migsNormalisedByArea, n=nClassBreaks, style=classifierFunction)
#create a map palette style for the choropleth colour
#paletteColourFunction <- colorBin("YlOrRd", domain = myVariableToMap, bins = bins)
paletteColourFunction <- colorBin("Reds", domain = myVariableToMap, bins = palData$brks)
paletteColourFunction2 <- colorBin("Reds", domain = myVariableToMap2, bins = palData2$brks)
################### Map display labels ###############################
layerTitle = "Number of migrants"
layerTitle2 = "Number of migrants by area"
labels <- sprintf(
"%s</strong><br/>%g migrants",
chinaSPDF$Districts_and_Town, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup>",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea
) %>% lapply(htmltools::HTML)
myMapCounts = leaflet(chinaSPDF) %>% addTiles()
# Separate map for counts
myMapCounts %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group = "OSM basemap") %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction(myVariableToMap),
weight = 2,
color = "white",
dashArray = "1",
group = layerTitle,
label=labels,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = paletteColourFunction, values = ~myVariableToMap,
title = layerTitle,
labFormat = labelFormat(prefix = ""),
opacity = 1
)
#Viewer window should now display choropleth map.
layerTitle = "Number of migrants"
layerTitle2 = "Number of migrants by area"
labels <- sprintf(
"%s</strong><br/>%g migrants",
chinaSPDF$Districts_and_Town, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: &counts",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
myMapCounts = leaflet(chinaSPDF) %>% addTiles()
# Separate map for counts
myMapCounts %>%
addProviderTiles("OpenStreetMap.BlackAndWhite", group = "OSM basemap") %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction(myVariableToMap),
weight = 2,
color = "white",
dashArray = "1",
group = layerTitle,
label=labels,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = paletteColourFunction, values = ~myVariableToMap,
title = layerTitle,
labFormat = labelFormat(prefix = ""),
opacity = 1
)
# Separate maps for density
myMapDensity = leaflet(chinaSPDF) %>% addTiles()
myMapDensity %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addLegend( "bottomright", pal = paletteColourFunction2, values = ~myVariableToMap2,
title = layerTitle2,
opacity = 1
) %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction2(myVariableToMap2),
weight = 2,
dashArray = "1",
color = "white",
group = layerTitle2,
label=labels2,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Viewer window should now display choropleth map.
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %counts",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
# Separate map for density
myMapDensity = leaflet(chinaSPDF) %>% addTiles()
myMapDensity %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addLegend( "bottomright", pal = paletteColourFunction2, values = ~myVariableToMap2,
title = layerTitle2,
opacity = 1
) %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction2(myVariableToMap2),
weight = 2,
dashArray = "1",
color = "white",
group = layerTitle2,
label=labels2,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Viewer window should now display choropleth map.
################### Map display labels ###############################
layerTitle = "Number of migrants"
layerTitle2 = "Number of migrants by area"
labels <- sprintf(
"%s</strong><br/>%g migrants",
chinaSPDF$Districts_and_Town, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %counts",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
# Separate map for density
myMapDensity = leaflet(chinaSPDF) %>% addTiles()
myMapDensity %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addLegend( "bottomright", pal = paletteColourFunction2, values = ~myVariableToMap2,
title = layerTitle2,
opacity = 1
) %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction2(myVariableToMap2),
weight = 2,
dashArray = "1",
color = "white",
group = layerTitle2,
label=labels2,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Viewer window should now display choropleth map.
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %counts",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %s",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %l",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
labels2 <- sprintf(
"%s</strong><br/>%g migrants /km<sup>2</sup><br/>Migrants count: %s",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
# Separate map for density
myMapDensity = leaflet(chinaSPDF) %>% addTiles()
myMapDensity %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addLegend( "bottomright", pal = paletteColourFunction2, values = ~myVariableToMap2,
title = layerTitle2,
opacity = 1
) %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction2(myVariableToMap2),
weight = 2,
dashArray = "1",
color = "white",
group = layerTitle2,
label=labels2,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Viewer window should now display choropleth map.
labels2 <- sprintf(
"%s</strong><br/>Density: %g migrants /km<sup>2</sup><br/>Num of migrants: %s",
chinaSPDF$Districts_and_Town, chinaSPDF$migsNormalisedByArea, chinaSPDF$Number_of_migrants
) %>% lapply(htmltools::HTML)
# Separate map for density
myMapDensity = leaflet(chinaSPDF) %>% addTiles()
myMapDensity %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
addLegend( "bottomright", pal = paletteColourFunction2, values = ~myVariableToMap2,
title = layerTitle2,
opacity = 1
) %>%
addPolygons(
fillOpacity = 0.60, smoothFactor = 0.5,
fillColor = ~paletteColourFunction2(myVariableToMap2),
weight = 2,
dashArray = "1",
color = "white",
group = layerTitle2,
label=labels2,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))
#Viewer window should now display choropleth map.
exit()
q
q()
